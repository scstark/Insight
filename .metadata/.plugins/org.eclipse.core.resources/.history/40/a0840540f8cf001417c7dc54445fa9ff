import java.io.File;
import java.io.FileNotFoundException;
import java.util.PriorityQueue;
import java.util.Scanner;


public class RunningMedian 
{
	/**
	 * Current sample size.
	 */
	int n;
	
	/**
	 * Effectively have a max heap by pushing on 
	 * negatives of the integers.
	 * Hence we can exploit the ordering properties of
	 * the integers with regard to inequalities.
	 */
	PriorityQueue<Integer> left;
	
	/**
	 * Need a min heap to take care of the 
	 * Java's Priority Queue for Integers is 
	 * by default a min heap.
	 */
	PriorityQueue<Integer> right;
	
	/**
	 * Constructor.
	 */
	public RunningMedian()
	{
		n = 0;
		
		left = new PriorityQueue<Integer>();
		right = new PriorityQueue<Integer>();
		
		readInput();
	}
	
	/**
	 * 
	 */
	public void readInput()
	{
		File dir = new File( "wc_input" );
		
		if( dir.exists() && dir.isDirectory() )
		{
			File[] input = dir.listFiles();
			
			for( int i = 0; i < input.length; i++ )
			{
				Scanner sc;
				try //try to scan a file.
				{
					sc = new Scanner( input[i] );
					
					//while there are lines left in the input.
					while( sc.hasNextLine() )
					{
						//read the line
						String line = sc.nextLine();
						n++;
						
						//count each word on the line.
						Scanner sc2 = new Scanner( line );
						//counting variable
						int count = 0;
						
						while( sc2.hasNext() )
						{
							sc2.next();
							count++;
						}
						
						//System.out.println( "Line " + n + " has " + count + " words." );
						//add the total number of words
						add( count );
						
						//System.out.println( "RM: " + getRM() );s
					}
				}
				catch( FileNotFoundException e )
				{
					//inform user of exception
					System.out.println("File " + input[i].getName() +
							" not found. \nContinuing on to next file.");
					//move on to next file
					continue;
				}
			}
		}
		else //in the case of a bad input, inform the user of what the problem is.
		{
			//if it exists then it's not a directory
			if( dir.exists() )
			{
				System.out.println( "File is not a directory." );
				System.exit(0);
			}
			else //otherwise is doesn't exist at all.
			{
				System.out.println( "File does not exist." );
				System.exit(0);

			}
			
		}
		
		
		//System.out.println( "RM: " + getRM() );

	}
	
	/**
	 * Calculate the sample median after each line.
	 * Aka the running median.
	 * @return
	 */
	public double getRM()
	{
		double rM = 0;
		
		//if n is even
		if ( n % 2 == 0 )
		{
			//System.out.println( "n is even" );
			rM = (double) ( -left.peek() + ( right.peek() ) ) / 2;
			//System.out.println("left root: " + -left.peek() );
			//System.out.println("right root: " + right.peek() );
			//System.out.println("mean: " + rM );

			
			//System.out.println( "even rm is " + left.peek);
		}
		//if n is odd
		else
		{
			if( left.size() > right.size() )
			{
				rM = -left.peek();
			}
			else
			{
				rM = right.peek();
			}
		}
		
		//System.out.println("# of lines: " + n + "\n" 
		//		+ "Size of Left: " + left.size() + "\n" 
		//		+ "Size of Right: " + right.size() );
				//+"\n" + "RM : " + rM );
		
		
		return rM;
	}
	
	/**
	 * Add an integer to the sample after reading a line
	 * @param i
	 */
	private void add( int i )
	{
		if( left.isEmpty() && right.isEmpty() )
		{
			right.add( i );
		}
		else if ( left.isEmpty() )
		{
			if ( i < right.peek() )
			{
				left.add( -i );
			}
			else
			{
				int head = right.remove();
				
				right.add( i );
				
				left.add( -head );
			}
		}
		else
		{

			if( i < right.peek() )
			{
				left.add( -i );
			}
			else
			{
				right.add( i );
			}
			
		}
		
		//make sure the heaps are balanced.
		balance();
	}
	
	/**
	 * Will manage the size between the two priority queues,
	 * such that there is at most a size difference of 1 between
	 * the two.
	 */
	private void balance()
	{
		//take the size difference between the two heaps
		int diff = Math.abs( left.size() - right.size() );
		//if the difference is greater than 1
		if( diff > 1 )
		{
			if( left.size() > right.size() )
			{
				//remove the head of the left heap
				//this head is positive
				int head = left.remove();
				//add it to the right heap, negated.
				right.add( -head );
			}
			else //otherwise the right heap is the larger heap.
			{
				//remove the head of the right heap
				//this head is negative
				int head = right.remove();
				//add it to the left heap, negated.
				left.add( -head );
			}
		}
		
		//otherwise do nothing.
	}
	
	public static void main( String[] args )
	{
		new RunningMedian();
	}
	
	
}
